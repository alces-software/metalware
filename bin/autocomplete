#!/usr/bin/env ruby
$:.unshift File.expand_path(File.join(__FILE__, "../../src"))
require 'bundler/setup'
require 'cli_helper/parser'

class AutoComplete
  def initialize
    @cur = (ARGV[0] == "__CUR_IS_EMPTY__" ? nil : ARGV[0])
    @complete = ARGV[2..-1] # skips the second input as this is always `metal`
    @complete.pop unless @cur.nil? # Remove the current element from completed
    @values = []
    @yaml = Metalware::CliHelper::Parser.new.parse_commands
    @input_only_contains_commands = true
  end

  def run
    auto_complete_commands
    return_values
  end

  def auto_complete_commands
    if @complete.empty?
      add_return_values(current_hash.keys)
    elsif current_hash.key?("subcommands") && @input_only_contains_commands
      add_return_values(current_hash["subcommands"].keys)
    end
  end

  def current_hash
    @current_hash ||= lambda() {
      cmd_hash = @yaml["commands"]
      @complete.each_with_index do |cmd, idx|
        if cmd_hash.key?("subcommands")
          new_hash = cmd_hash["subcommands"][cmd]
        elsif idx == 0
          new_hash = cmd_hash[cmd]
        else
          new_hash = {}
        end
        if new_hash.nil? || new_hash.empty?
          @input_only_contains_commands = false
          break
        end
        cmd_hash = new_hash
      end
      cmd_hash
    }.call
  end

  def add_return_values(values)
    values.is_a?(Array) ? @values.concat(values) : @values.push(values)
  end

  def return_values
    puts @values.join(" ")
  end
end

AutoComplete.new.run