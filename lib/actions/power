<<DOC
: '
: NAME: power
: SYNOPSIS: Perform IPMI Power commands
: VERSION: 4.1.0
: '
DOC
#==============================================================================
# Copyright (C) 2007-2015 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Metalware.
#
# Alces Metalware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Metalware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Metalware, please visit:
# https://github.com/alces-software/metalware
#==============================================================================
# vim: set filetype=sh :

ALCES_ROOT=/opt/metalware
ALCES_ETC=$ALCES_ROOT/etc
LOCAL_BMC_CONFIG=/etc/sysconfig/network-scripts/ifcfg-bmc
SHARED_BMC_CONFIG=$ALCES_ETC/ifcfg-bmc
ALCES_IPMI_CONFIG=$ALCES_ETC/ipmi.conf

if [ ! -d "$ALCES_ETC" ]; then
  echo "Configuration directory not available"
  echo ""
  echo "The configuration directory (${ALCES_ETC}) is not available - please ensure that ${ALCES_ROOT} is mounted.  If your cluster is configured with high availability services, you should check that these have been started." | fold -s -w70
  echo ""
  echo "If problems persist, please contact Alces Customer Support at <support@alces-software.com>." | fold -s -w70
  exit 1
fi

if [ -f $ALCES_IPMI_CONFIG ]; then
  . $ALCES_IPMI_CONFIG
fi

if [ -f $SHARED_BMC_CONFIG ]; then
  . $SHARED_BMC_CONFIG
fi

if [ -f $LOCAL_BMC_CONFIG ]; then
  . $LOCAL_BMC_CONFIG
fi

if [ -z $USERNAME ]; then
 USERNAME=admin
fi
if [ -z $PASSWORD ]; then
 PASSWORD=password
fi
if [ -z $IPMI_HEAD ]; then
 IPMI_HEAD=
fi
if [ -z $IPMI_TAIL ]; then
 IPMI_TAIL=-bmc
fi
if [ -z $STEP_INTERVAL ]; then
 STEP_INTERVAL=0.5
fi

. ${ALCES_ROOT}/lib/functions/nodegather.sh

export OUTPUT=0
export IPMI_PASSWORD="${PASSWORD}"

set_cmd()
{
  case "$1" in
    on)
      CMD="chassis power on"
    ;;
    off)
      CMD="chassis power off"
    ;;
    locate)
      CMD="chassis identify force"
    ;;
    locateoff)
      CMD="chassis identify 0"
    ;;
    status)
      CMD="chassis power status"
      OUTPUT=1
    ;;
    cycle)
      CMD="chassis power cycle"
    ;;
    reset)
      CMD="chassis power reset"
    ;;
    sensor)
      CMD="sensor"
    ;;
    *)
      CMD=""
  esac
}

usage()
{
  echo "(c) 2008-2011 Alces Software Ltd & Stephen F Norledge"
  echo "Power command, perform ipmi remote power commands on single or multiple machines"
  echo "usage: alces power [-g] <name> <command>"
  echo "  options:"
  echo "    -g specify genders node group"
  echo "  parameters:"
  echo "    <name> node name or genders group name"
  echo "    <command> ipmi command:"
  echo "      on     - power on"
  echo "      off    - power off"
  echo "      status - power status"
  echo "      locate - locate light on"
  echo "      locateoff - locate light off"
  echo "      cycle  - power cycle"
  echo "      reset  - warm reset"
  echo
}

if [ "$1" == "-g" ]; then
  if [ -z "$2" ]; then
    echo "Please enter nodegroup name" >&2
    usage
    exit 1
  fi
  NODES=`nodegather $2`
  set_cmd $3
else
  if [ -z "$1" ]; then
    echo "Please enter node/group name" >&2
    usage
    exit 1
  fi
  NODES=$1
  set_cmd $2
fi

if [ -z "$NODES" ]; then
  exit 1
fi

if [ -z "$CMD" ]; then
  echo "Please specify command" >&2
  usage
  exit 1
fi

NO_SLEEP=1
for NODE in $NODES; do
  if [ NO_SLEEP != 1 ]; then
    sleep $STEP_INTERVAL
  fi
  NO_SLEEP=0
  cmd="ipmitool -H ${IPMI_HEAD}${NODE}${IPMI_TAIL} -U${USERNAME} -E $CMD -I lanplus"
  echo -n "Performing command on $NODE.."
  if [ $OUTPUT -eq 0 ]; then
    $cmd > /dev/null 2>&1 && echo OK || echo FAIL
  else
    $cmd || echo FAIL
  fi
done

